openapi: 3.1.0
info:
  title: User API
  description: A simple API to manage users
  version: 1.0.0
  contact:
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://sandbox.api.example.com/v1
    description: Sandbox server for testing
paths:
  /users/{id}:
    get:
      summary: Get a user by ID
      description: An endpoint that retrieves a user by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid ID format."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."
  /users/login:
    post:
      summary: User Login
      description: An endpoint to authenticate users using email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Email format is not valid."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."
  /users:
    get:
      summary: Fetch all users
      description: An endpoint to get all users using filter and page.
      parameters:
        - name: email
          in: query
          schema:
            type: string
            format: email
        - name: firstname
          in: query
          schema:
            type: string
        - name: lastname
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
            enum: [ Admin, Employee, Client ]
        - name: page
          in: query
          schema:
            type: integer
        - name: size
          in: query
          schema:
            type: integer
      response:
        '200':
          description: Users returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
  /employees:
    post:
      summary: Create Employee
      description: An endpoint to create a new employee.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployee'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorInvalidEmail'
                  - $ref: '#/components/schemas/ErrorMissingFields'
    put:
      summary: Update Employee
      description: An endpoint to update a new employee.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployee'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorInvalidEmail'
                  - $ref: '#/components/schemas/ErrorMissingFields'
    get:
      summary: Fetch all employees
      description: An endpoint to get all employees using filter and pagination.
      parameters:
        - name: email
          in: query
          schema:
            type: string
            format: email
        - name: firstName
          in: query
          schema:
            type: string
        - name: lastName
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
            enum: [ Admin, Employee, Client ]
        - name: page
          in: query
          schema:
            type: integer
        - name: size
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Employees returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeDto'

  /employees/{id}:
    get:
      summary: Get an employee by ID
      description: An endpoint that retrieves an employee by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Employee details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid ID format."
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Employee not found."
  /clients:
    post:
      summary: Create Client
      description: An endpoint to create a new client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClient'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data."
    put:
      summary: Update Client
      description: An endpoint to update an existing client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClient'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data."
    get:
      summary: Fetch all clients
      description: An endpoint to get all clients using filter and pagination.
      parameters:
        - name: email
          in: query
          schema:
            type: string
            format: email
        - name: firstName
          in: query
          schema:
            type: string
        - name: lastName
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
            enum: [ Admin, Employee, Client ]
        - name: page
          in: query
          schema:
            type: integer
        - name: size
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Clients returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientDto'
  /clients/{id}:
    get:
      summary: Get a client by ID
      description: An endpoint that retrieves a client by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Client details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid ID format."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."
components:
  schemas:
    User:
      type: object
      description: A User database entity is required as part of the bank system to represent shared fields between employees and clients.
      required:
        - id
        - firstName
        - lastName
        - dateOfBirth
        - gender
        - uniqueIdentificationNumber
        - email
        - phoneNumber
        - address
        - role
        - createdAt
        - modifiedAt
        - activated
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        firstName:
          type: string
          maxLength: 32
        lastName:
          type: string
          maxLength: 32
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
          enum: [Male, Female]
        uniqueIdentificationNumber:
          type: string
          description: Serbian JMBG (Unique Identification Number)
        username:
          type: string
          maxLength: 32
          description: Optional username
        email:
          type: string
          format: email
          maxLength: 320
        phoneNumber:
          type: string
        address:
          type: string
          maxLength: 64
        role:
          type: string
          enum: [Admin, Employee, Client]
        department:
          type: string
          maxLength: 64
          description: Optional department
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
        employed:
          type: boolean
        activated:
          type: boolean
    Employee:
      type: object
      description: A Employee database entity is required as part of the bank system to represent person that works in bank.
      required:
        - id
        - firstName
        - lastName
        - dateOfBirth
        - gender
        - uniqueIdentificationNumber
        - email
        - phoneNumber
        - address
        - role
        - createdAt
        - modifiedAt
        - activated
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        firstName:
          type: string
          maxLength: 32
        lastName:
          type: string
          maxLength: 32
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
          enum: [ Male, Female ]
        uniqueIdentificationNumber:
          type: string
          description: Serbian JMBG (Unique Identification Number)
        username:
          type: string
          maxLength: 32
          description: Optional username
        email:
          type: string
          format: email
          maxLength: 320
        phoneNumber:
          type: string
        address:
          type: string
          maxLength: 64
        role:
          type: string
          enum: [ Admin, Employee, Client ]
        department:
          type: string
          maxLength: 64
          description: Optional department
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
        employed:
          type: boolean
        activated:
          type: boolean
    CreateEmployee:
      type: object
      required:
        - FirstName
        - LastName
        - DateOfBirth
        - Gender
        - UniqueIdentificationNumber
        - Username
        - Email
        - PhoneNumber
        - Address
        - Role
        - Department
        - Employed
      properties:
        FirstName:
          type: string
          maxLength: 32
          pattern: "^[A-Za-zčćžšđČĆŽŠĐ ]+$"
        LastName:
          type: string
          maxLength: 32
          pattern: "^[A-Za-zčćžšđČĆŽŠĐ ]+$"
        DateOfBirth:
          type: string
          format: date
        Gender:
          type: string
          enum:
            - Male
            - Female
        UniqueIdentificationNumber:
          type: string
          description: "Serbian JMBG (Unique Identification Number)."
          pattern: "^[0-9]{13}$"
          example: "0101990123456"
        Username:
          type: string
          pattern: "^[0-9A-Za-zčćžšđČĆŽŠĐ]+$"
        Email:
          type: string
          format: email
        PhoneNumber:
          type: string
          pattern: "^\\+[0-9]{11,12}$"
        Address:
          type: string
          pattern: "^[0-9A-Za-zčćžšđČĆŽŠĐ ]+$"
        Role:
          type: string
          enum:
            - Admin
            - Employee
            - Client
        Department:
          type: string
          pattern: "^[0-9A-Za-zčćžšđČĆŽŠĐ ]+$"
        Employed:
          type: boolean
    UpdateEmployee:
      type: object
      required:
        - FirstName
        - LastName
        - Username
        - PhoneNumber
        - Address
        - Role
        - Department
        - Employed
        - Activated
      properties:
        FirstName:
          type: string
          maxLength: 32
          pattern: "^[A-Za-zčćžšđČĆŽŠĐ ]+$"
        LastName:
          type: string
          maxLength: 32
          pattern: "^[A-Za-zčćžšđČĆŽŠĐ ]+$"
        Username:
          type: string
          pattern: "^[0-9A-Za-zčćžšđČĆŽŠĐ]+$"
        PhoneNumber:
          type: string
          pattern: "^\\+[0-9]{11,12}$"
        Address:
          type: string
          pattern: "^[0-9A-Za-zčćžšđČĆŽŠĐ ]+$"
        Role:
          type: string
          enum:
            - Admin
            - Employee
        Department:
          type: string
          pattern: "^[0-9A-Za-zčćžšđČĆŽŠĐ ]+$"
        Employed:
          type: boolean
        Activated:
          type: boolean
    Client:
      type: object
      description: A Client model in the bank system.
      required:
        - id
        - firstName
        - lastName
        - dateOfBirth
        - gender
        - uniqueIdentificationNumber
        - email
        - phoneNumber
        - address
        - password
        - salt
        - role
        - createdAt
        - modifiedAt
        - activated
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
          enum: [ Male, Female ]
        uniqueIdentificationNumber:
          type: string
          description: Serbian JMBG (Unique Identification Number)
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        address:
          type: string
        password:
          type: string
          description: Hashed password for authentication.
        salt:
          type: string
          format: uuid
        role:
          type: string
          enum: [ Admin, Employee, Client ]
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
        activated:
          type: boolean
    CreateClient:
      type: object
      required:
        - FirstName
        - LastName
        - DateOfBirth
        - Gender
        - UniqueIdentificationNumber
        - Email
        - PhoneNumber
        - Address
      properties:
        FirstName:
          type: string
          maxLength: 32
          pattern: "^[A-Za-zčćžšđČĆŽŠĐ ]+$"
        LastName:
          type: string
          maxLength: 32
          pattern: "^[A-Za-zčćžšđČĆŽŠĐ ]+$"
        DateOfBirth:
          type: string
          format: date
        Gender:
          type: string
          enum:
            - Male
            - Female
        UniqueIdentificationNumber:
          type: string
          description: "Serbian JMBG (Unique Identification Number)."
          pattern: "^[0-9]{13}$"
          example: "0101990123456"
        Email:
          type: string
          format: email
        PhoneNumber:
          type: string
          pattern: "^\\+[0-9]{11,12}$"
        Address:
          type: string
          pattern: "^[0-9A-Za-zčćžšđČĆŽŠĐ ]+$"
    UpdateClient:
      type: object
      required:
        - FirstName
        - LastName
        - PhoneNumber
        - Address
        - Activated
      properties:
        FirstName:
          type: string
          maxLength: 32
          pattern: "^[A-Za-zčćžšđČĆŽŠĐ ]+$"
        LastName:
          type: string
          maxLength: 32
          pattern: "^[A-Za-zčćžšđČĆŽŠĐ ]+$"
        PhoneNumber:
          type: string
          pattern: "^\\+[0-9]{11,12}$"
        Address:
          type: string
          pattern: "^[0-9A-Za-zčćžšđČĆŽŠĐ ]+$"
        Activated:
          type: boolean
    UserDto:
      type: object
      properties:
        Id:
          type: string
          format: uuid
          description: "Unique identifier for the user."
        FirstName:
          type: string
        LastName:
          type: string
        DateOfBirth:
          type: string
          format: date
        Gender:
          type: string
          enum:
            - Male
            - Female
        UniqueIdentificationNumber:
          type: string
          description: "Serbian JMBG (Unique Identification Number)."
        Username:
          type: string
        Email:
          type: string
        PhoneNumber:
          type: string
        Address:
          type: string
        Role:
          type: string
          enum:
            - Admin
            - Employee
            - Client
        Department:
          type: string
        CreatedAt:
          type: string
          format: date-time
        ModifiedAt:
          type: string
          format: date-time
        Employed:
          type: boolean
        Activated:
          type: boolean
      example:
        Id: "550e8400-e29b-41d4-a716-446655440000"
        FirstName: "John"
        LastName: "Doe"
        DateOfBirth: "1990-01-01"
        Gender: "Male"
        UniqueIdentificationNumber: "0101990123456"
        Username: "johndoe"
        Email: "johndoe@example.com"
        PhoneNumber: "+381641234567"
        Address: "123 Main St, Belgrade"
        Role: "Employee"
        Department: "IT"
        CreatedAt: "2024-01-01T12:00:00Z"
        ModifiedAt: "2024-01-10T14:30:00Z"
        Employed: true
        Activated: true
    EmployeeDto:
      type: object
      properties:
        Id:
          type: string
          format: uuid
          description: "Unique identifier for the employee."
        FirstName:
          type: string
        LastName:
          type: string
        DateOfBirth:
          type: string
          format: date
        Gender:
          type: string
          enum:
            - Male
            - Female
        UniqueIdentificationNumber:
          type: string
          description: "Serbian JMBG (Unique Identification Number)."
        Username:
          type: string
        Email:
          type: string
        PhoneNumber:
          type: string
        Address:
          type: string
        Role:
          type: string
          enum:
            - Employee
        Department:
          type: string
        CreatedAt:
          type: string
          format: date-time
        ModifiedAt:
          type: string
          format: date-time
        Employed:
          type: boolean
        Activated:
          type: boolean
      example:
        Id: "550e8400-e29b-41d4-a716-446655440000"
        FirstName: "Marko"
        LastName: "Jovanović"
        DateOfBirth: "1988-04-15"
        Gender: "Male"
        UniqueIdentificationNumber: "1504885123456"
        Username: "markoj"
        Email: "marko.jovanovic@example.com"
        PhoneNumber: "+381641234567"
        Address: "Bulevar Kralja Aleksandra 45, Belgrade"
        Role: "Employee"
        Department: "Software Development"
        CreatedAt: "2024-01-01T09:00:00Z"
        ModifiedAt: "2024-02-10T14:30:00Z"
        Employed: true
        Activated: true
    ClientDto:
      type: object
      properties:
        Id:
          type: string
          format: uuid
          description: "Unique identifier for the client."
        FirstName:
          type: string
        LastName:
          type: string
        DateOfBirth:
          type: string
          format: date
        Gender:
          type: string
          enum:
            - Male
            - Female
        UniqueIdentificationNumber:
          type: string
          description: "Serbian JMBG (Unique Identification Number)."
        Email:
          type: string
        PhoneNumber:
          type: string
        Address:
          type: string
        Role:
          type: string
          enum:
            - Client
        CreatedAt:
          type: string
          format: date-time
        ModifiedAt:
          type: string
          format: date-time
        Activated:
          type: boolean
      example:
        Id: "660e8400-e29b-41d4-a716-446655440001"
        FirstName: "Ana"
        LastName: "Petrović"
        DateOfBirth: "1995-07-22"
        Gender: "Female"
        UniqueIdentificationNumber: "2207957123456"
        Email: "ana.petrovic@example.com"
        PhoneNumber: "+381651234567"
        Address: "Kneza Miloša 12, Novi Sad"
        Role: "Client"
        CreatedAt: "2024-01-15T10:00:00Z"
        ModifiedAt: "2024-02-20T12:45:00Z"
        Activated: true
    ErrorInvalidEmail:
    type: object
    properties:
      errorCode:
        type: string
        example: "INVALID_EMAIL"
      message:
        type: string
        example: "The provided email address is invalid."

    ErrorMissingFields:
      type: object
      properties:
        errorCode:
          type: string
          example: "MISSING_FIELDS"
        message:
          type: string
          example: "Required fields are missing."
        missingFields:
          type: array
          items:
            type: string
          example: [ "name", "email" ]

    ErrorDuplicateUser:
      type: object
      properties:
        errorCode:
          type: string
          example: "DUPLICATE_USER"
        message:
          type: string
          example: "A user with the same email already exists."